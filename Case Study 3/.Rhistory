pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tidyverse, tree, e1071, MASS)
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
str(raw_index_data)
skim(raw_index_data)
anyNA(raw_index_data)
missing_values <- colSums(is.na(raw_index_data))
missing_values
train_data <- subset(raw_index_data, quarter == 1)  # Training data (Q1: Jan-Mar)
test_data <- subset(raw_index_data, quarter == 2)   # Testing data (Q2: Apr-Jun)
cor_matrix <- cor(train_data[, sapply(train_data, is.numeric)], use = "complete.obs")
cor_matrix
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tidyverse, tree, e1071, MASS)
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
selected_vars <- c("percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tidyverse)
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
tidyverse, tree, e1071, MASS
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
test_data_filtered <- test_data %>%
select(all_of(selected_vars))
pacman::p_load(tidyverse,here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2,tree, e1071, MASS)
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(tidyverse, here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tree, e1071, MASS)
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data[,selected_vars]
test_data_filtered <- test_data %>%
select(all_of(selected_vars))
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data[,selected_vars]
test_data_filtered <- test_data[,selected_vars]
train_data_filtered <- train_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))  # Clean and convert
test_data_filtered <- test_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))
pacman::p_load(tidyverse, here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tree, e1071, MASS)
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
str(raw_index_data)
skim(raw_index_data)
anyNA(raw_index_data)
missing_values <- colSums(is.na(raw_index_data))
missing_values
train_data <- subset(raw_index_data, quarter == 1)  # Training data (Q1: Jan-Mar)
test_data <- subset(raw_index_data, quarter == 2)   # Testing data (Q2: Apr-Jun)
cor_matrix <- cor(train_data[, sapply(train_data, is.numeric)], use = "complete.obs")
cor_matrix
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data[,selected_vars]
test_data_filtered <- test_data[,selected_vars]
train_data_filtered <- train_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))  # Clean and convert
test_data_filtered <- test_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))
# KNN imputation on the training data
train_data_imputed <- kNN(train_data_filtered, variable = c("percent_change_volume_over_last_wk", "previous_weeks_volume"),
k = 5, imp_var = F)  # Adjust k (number of neighbors) as necessary
# Should return 'FALSE' if no missing values
anyNA(train_data_imputed)
normalize_min_max <- function(x) {
(x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
train_data_scaled <- train_data_imputed %>%
mutate(across(where(is.numeric), normalize_min_max))
test_data_scaled <- test_data_filtered %>%
mutate(across(where(is.numeric), normalize_min_max))
train_data_scaled <- train_data_scaled %>%
mutate(date = parse_date_time(date, '%m/%d/%Y'))
test_data_scaled <- test_data_scaled %>%
mutate(date = parse_date_time(date, '%m/%d/%Y'))
train_data_scaled %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price)
) %>% head()
train_data_scaled <- train_data_scaled %>%
group_by(stock) %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price, n = 4)
) %>% ungroup()
test_data_scaled <- test_data_scaled %>%
group_by(stock) %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price, n = 4)
) %>% ungroup()
ggplot(train_data_scaled, aes(x = percent_change_price_lag1, y = percent_change_price)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Lagged Variable Plot: Percentage Change in Price (t) vs (t-1)",
x = "Percentage Change in Price (t-4)",
y = "Percentage Change in Price (t)"
) +
theme_minimal()
tree_model <- rpart(percent_change_next_weeks_price ~ ., data = train_data_scaled, method = "anova")
print(tree_model)
printcp(tree_model)
plot(tree_model, uniform = TRUE, main = "Regression Tree for Stock Price Prediction")
text(tree_model, use.n = TRUE, all = TRUE, cex = 0.7)
set.seed(123)
lagtree <- tree(percent_change_next_weeks_price ~ ., data = train_data_scaled)
# If needed, pruning can be performed by specifying the "best" argument
cv.lag <- cv.tree(lagtree)
best_size <- cv.lag$size[which.min(cv.lag$dev)]
prune.lag <- prune.tree(lagtree, best = best_size)
summary(prune.lag)
print(best_size)
# Get predictions on the test data
dtpreds <- predict(lagtree, newdata = test_data_scaled)
testpreds <- data.frame(date = test_data_scaled$date,
stock = test_data_scaled$stock,
response = test_data_scaled$percent_change_next_weeks_price,
dt = dtpreds)
mse_dt = mean((testpreds$response - testpreds$dt)^2)
mae_dt = mean(abs(testpreds$response - testpreds$dt))
me_dt = mean(testpreds$response - testpreds$dt)
mape_dt = mean(abs(testpreds$response - testpreds$dt)*100/testpreds$response)
testperfs <- data.frame(dt = c(mse_dt, mae_dt, me_dt, mape_dt)
) %>% t()
colnames(testperfs) <- c('mse', 'mae', 'me', 'mape')
print('')
print(testperfs)
lmfit1 <- step(lm(percent_change_next_weeks_price ~ ., data = na.omit(train_data_scaled)), method = 'both')
summary(lmfit1)
lmpreds <- predict(lmfit1, test_data_scaled)
testpreds$lm <- lmpreds
mse_lm = mean((testpreds$response - testpreds$lm)^2)
mae_lm = mean(abs(testpreds$response - testpreds$lm))
me_lm = mean(testpreds$response - testpreds$lm)
mape_lm = mean(abs(testpreds$response - testpreds$lm)*100/testpreds$response)
testperfs <- rbind(testperfs, lm = c(mse_lm, mae_lm, me_lm, mape_lm))
print(testperfs)
plot(lmfit1)
form1 <- percent_change_next_weeks_price ~ .
svr_tune1 <- tune.svm(form1, data = train_data_scaled, gamma = seq(.01,.1, by = .01), cost = seq(.1, 1, by = .1), scale = T)
form1 <- percent_change_next_weeks_price ~ .
svr_tune1 <- tune.svm(form1, data = train_data_scaled, gamma = seq(.01,.1, by = .01), cost = seq(.1, 1, by = .1), scale = T)
View(test_data_scaled)
View(train_data_scaled)

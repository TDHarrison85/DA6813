<<<<<<< Updated upstream
mse_dt = mean((testpreds$response - testpreds$dt)^2)
mae_dt = mean(abs(testpreds$response - testpreds$dt))
me_dt = mean(testpreds$response - testpreds$dt)
mape_dt = mean(abs(testpreds$response - testpreds$dt)*100/testpreds$response)
testperfs <- data.frame(dt = c(mse_dt, mae_dt, me_dt, mape_dt)
) %>% t()
colnames(testperfs) <- c('mse', 'mae', 'me', 'mape')
print('')
print(testperfs)
lmfit1 <- step(lm(percent_change_next_weeks_price ~ ., data = na.omit(train_data_scaled)), method = 'both')
summary(lmfit1)
lmpreds <- predict(lmfit1, test_data_scaled)
testpreds$lm <- lmpreds
mse_lm = mean((testpreds$response - testpreds$lm)^2)
mae_lm = mean(abs(testpreds$response - testpreds$lm))
me_lm = mean(testpreds$response - testpreds$lm)
mape_lm = mean(abs(testpreds$response - testpreds$lm)*100/testpreds$response)
testperfs <- rbind(testperfs, lm = c(mse_lm, mae_lm, me_lm, mape_lm))
print(testperfs)
plot(lmfit1)
form1 <- percent_change_next_weeks_price ~ .
svr_tune1 <- tune.svm(form1, data = train_data_scaled, gamma = seq(.01,.1, by = .01), cost = seq(.1, 1, by = .1), scale = T)
form1 <- percent_change_next_weeks_price ~ .
svr_tune1 <- tune.svm(form1, data = train_data_scaled, gamma = seq(.01,.1, by = .01), cost = seq(.1, 1, by = .1), scale = T)
View(test_data_scaled)
View(train_data_scaled)
pacman::p_load(MASS, tidyverse, here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tree, e1071)
select <- dplyr::select
=======
<<<<<<< Updated upstream
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tidyverse, tree, e1071, MASS)
=======
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car)
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
str(raw_index_data)
skim(raw_index_data)
View(raw_index_data)
View(raw_index_names)
missing_values <- colSums(is.na(raw_index_data))
missing_values
# Split data into training (Q1) and testing (Q2)
train_data <- subset(raw_index_data, quarter == 1)  # Training data (Q1: Jan-Mar)
test_data <- subset(raw_index_data, quarter == 2)   # Testing data (Q2: Apr-Jun)
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
>>>>>>> Stashed changes
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
str(raw_index_data)
skim(raw_index_data)
anyNA(raw_index_data)
missing_values <- colSums(is.na(raw_index_data))
missing_values
train_data <- subset(raw_index_data, quarter == 1)  # Training data (Q1: Jan-Mar)
test_data <- subset(raw_index_data, quarter == 2)   # Testing data (Q2: Apr-Jun)
cor_matrix <- cor(train_data[, sapply(train_data, is.numeric)], use = "complete.obs")
cor_matrix
<<<<<<< Updated upstream
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tidyverse, tree, e1071, MASS)
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
=======
>>>>>>> Stashed changes
selected_vars <- c("percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
<<<<<<< Updated upstream
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tidyverse)
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
tidyverse, tree, e1071, MASS
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
test_data_filtered <- test_data %>%
select(all_of(selected_vars))
pacman::p_load(tidyverse,here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2,tree, e1071, MASS)
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
pacman::p_load(tidyverse, here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tree, e1071, MASS)
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data[,selected_vars]
test_data_filtered <- test_data %>%
select(all_of(selected_vars))
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data[,selected_vars]
test_data_filtered <- test_data[,selected_vars]
train_data_filtered <- train_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))  # Clean and convert
test_data_filtered <- test_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))
pacman::p_load(tidyverse, here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tree, e1071, MASS)
>>>>>>> Stashed changes
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
str(raw_index_data)
skim(raw_index_data)
anyNA(raw_index_data)
missing_values <- colSums(is.na(raw_index_data))
missing_values
train_data <- subset(raw_index_data, quarter == 1)  # Training data (Q1: Jan-Mar)
test_data <- subset(raw_index_data, quarter == 2)   # Testing data (Q2: Apr-Jun)
cor_matrix <- cor(train_data[, sapply(train_data, is.numeric)], use = "complete.obs")
cor_matrix
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data[,selected_vars]
test_data_filtered <- test_data[,selected_vars]
train_data_filtered <- train_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))  # Clean and convert
test_data_filtered <- test_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))
# KNN imputation on the training data
train_data_imputed <- kNN(train_data_filtered, variable = c("percent_change_volume_over_last_wk", "previous_weeks_volume"),
k = 5, imp_var = F)  # Adjust k (number of neighbors) as necessary
=======
train_data_filtered <- train_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))  # Clean and convert
# KNN imputation on the training data
train_data_imputed <- kNN(train_data, variable = c("percent_change_volume_over_last_wk", "previous_weeks_volume"),
k = 5)  # Adjust k (number of neighbors) as necessary
>>>>>>> Stashed changes
# Should return 'FALSE' if no missing values
anyNA(train_data_imputed)
normalize_min_max <- function(x) {
(x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
train_data_scaled <- train_data_imputed %>%
mutate(across(where(is.numeric), normalize_min_max))
<<<<<<< Updated upstream
test_data_scaled <- test_data_filtered %>%
mutate(across(where(is.numeric), normalize_min_max))
train_data_scaled <- train_data_scaled %>%
mutate(date = parse_date_time(date, '%m/%d/%Y'))
test_data_scaled <- test_data_scaled %>%
mutate(date = parse_date_time(date, '%m/%d/%Y'))
train_data_scaled %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price)
) %>% head()
train_data_scaled <- train_data_scaled %>%
group_by(stock) %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price, n = 1)
) %>% ungroup()
test_data_scaled <- test_data_scaled %>%
group_by(stock) %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price, n = 1)
) %>% ungroup()
=======
train_data_scaled <- train_data_scaled %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price)
)
>>>>>>> Stashed changes
ggplot(train_data_scaled, aes(x = percent_change_price_lag1, y = percent_change_price)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Lagged Variable Plot: Percentage Change in Price (t) vs (t-1)",
<<<<<<< Updated upstream
x = "Percentage Change in Price (t-1)",
=======
<<<<<<< Updated upstream
x = "Percentage Change in Price (t-4)",
>>>>>>> Stashed changes
y = "Percentage Change in Price (t)"
) +
theme_minimal()
=======
x = "Percentage Change in Price (t-1)",
y = "Percentage Change in Price (t)"
) +
theme_minimal()
ggplot(train_data_scaled, aes(x = percent_change_price_lag1, y = percent_change_price)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Lagged Variable Plot: Percentage Change in Price (t) vs (t-1)",
x = "Percentage Change in Price (t-1)",
y = "Percentage Change in Price (t)"
) +
theme_minimal()
lag.plot(train_data_scaled, pch = ".", set.lags = 1:4)
ggplot(train_data_scaled, aes(x = percent_change_price_lag1, y = percent_change_price)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Lagged Variable Plot: Percentage Change in Price (t) vs (t-1)",
x = "Percentage Change in Price (t-1)",
y = "Percentage Change in Price (t)"
) +
theme_minimal()
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, stats)
ggplot(train_data_scaled, aes(x = percent_change_price_lag1, y = percent_change_price)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Lagged Variable Plot: Percentage Change in Price (t) vs (t-1)",
x = "Percentage Change in Price (t-1)",
y = "Percentage Change in Price (t)"
) +
theme_minimal()
lag.plot(train_data_scaled, pch = ".", set.lags = 1:4)
train_data_scaled <- train_data_scaled %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price)
)
lag.plot(train_data_scaled, pch = ".", set.lags = 1:4)
train_data_scaled <- train_data_scaled %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price)
)
sum(is.na(train_data_scaled))
sum(is.nan(train_data_scaled))
train_data_scaled <- train_data_scaled %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price)
)
sum(is.na(train_data_scaled))
str(train_data_scaled)
sum(is.nan(train_data_scaled))
ggplot(train_data_scaled, aes(x = percent_change_price_lag1, y = percent_change_price)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Lagged Variable Plot: Percentage Change in Price (t) vs (t-1)",
x = "Percentage Change in Price (t-1)",
y = "Percentage Change in Price (t)"
) +
theme_minimal()
sum(is.na(train_data_scaled))
summary(train_data_scaled)
ggplot(train_data_scaled, aes(x = percent_change_price_lag1, y = percent_change_price)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Lagged Variable Plot: Percentage Change in Price (t) vs (t-1)",
x = "Percentage Change in Price (t-1)",
y = "Percentage Change in Price (t)"
) +
theme_minimal()
sum(is.na(train_data_scaled))
summary(train_data_scaled)
sum(is.na(train_data_scaled))
View(train_data_scaled)
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
str(raw_index_data)
skim(raw_index_data)
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
View(raw_index_data)
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, tseries, quantmod, ggplot2)
View(raw_index_names)
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, tseries, quantmod, ggplot2)
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
str(raw_index_data)
skim(raw_index_data)
anyNA(raw_index_data)
missing_values <- colSums(is.na(raw_index_data))
missing_values
train_data <- subset(raw_index_data, quarter == 1)  # Training data (Q1: Jan-Mar)
test_data <- subset(raw_index_data, quarter == 2)   # Testing data (Q2: Apr-Jun)
cor_matrix <- cor(train_data[, sapply(train_data, is.numeric)], use = "complete.obs")
cor_matrix
selected_vars <- c("percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
train_data_filtered <- train_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))  # Clean and convert
# KNN imputation on the training data
train_data_imputed <- kNN(train_data, variable = c("percent_change_volume_over_last_wk", "previous_weeks_volume"),
k = 5)  # Adjust k (number of neighbors) as necessary
# Should return 'FALSE' if no missing values
anyNA(train_data_imputed)
normalize_min_max <- function(x) {
(x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
train_data_scaled <- train_data_imputed %>%
mutate(across(where(is.numeric), normalize_min_max))
train_data_scaled <- train_data_scaled %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price)
)
ggplot(train_data_scaled, aes(x = percent_change_price_lag1, y = percent_change_price)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Lagged Variable Plot: Percentage Change in Price (t) vs (t-1)",
x = "Percentage Change in Price (t-1)",
y = "Percentage Change in Price (t)"
) +
theme_minimal()
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2)
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
str(raw_index_data)
skim(raw_index_data)
>>>>>>> Stashed changes
tree_model <- rpart(percent_change_next_weeks_price ~ ., data = train_data_scaled, method = "anova")
print(tree_model)
printcp(tree_model)
plot(tree_model, uniform = TRUE, main = "Regression Tree for Stock Price Prediction")
<<<<<<< Updated upstream
text(tree_model, use.n = TRUE, all = TRUE, cex = 0.7)
set.seed(123)
lagtree <- tree(percent_change_next_weeks_price ~ ., data = train_data_scaled)
# If needed, pruning can be performed by specifying the "best" argument
cv.lag <- cv.tree(lagtree)
best_size <- cv.lag$size[which.min(cv.lag$dev)]
prune.lag <- prune.tree(lagtree, best = best_size)
summary(prune.lag)
print(best_size)
# Get predictions on the test data
dtpreds <- predict(lagtree, newdata = test_data_scaled)
testpreds <- data.frame(date = test_data_scaled$date,
stock = test_data_scaled$stock,
response = test_data_scaled$percent_change_next_weeks_price,
dt = dtpreds)
mse_dt = mean((testpreds$response - testpreds$dt)^2)
mae_dt = mean(abs(testpreds$response - testpreds$dt))
me_dt = mean(testpreds$response - testpreds$dt)
mape_dt = mean(abs(testpreds$response - testpreds$dt)*100/testpreds$response)
testperfs <- data.frame(dt = c(mse_dt, mae_dt, me_dt, mape_dt)
) %>% t()
colnames(testperfs) <- c('mse', 'mae', 'me', 'mape')
print('')
print(testperfs)
lmfit1 <- step(lm(percent_change_next_weeks_price ~ . - percent_change_price_lag1, data = na.omit(train_data_scaled)), method = 'both')
summary(lmfit1)
lmpreds <- predict(lmfit1, test_data_scaled)
testpreds$lm <- lmpreds
mse_lm = mean((testpreds$response - testpreds$lm)^2)
mae_lm = mean(abs(testpreds$response - testpreds$lm))
me_lm = mean(testpreds$response - testpreds$lm)
mape_lm = mean(abs(testpreds$response - testpreds$lm)*100/testpreds$response)
testperfs <- rbind(testperfs, lm = c(mse_lm, mae_lm, me_lm, mape_lm))
print(testperfs)
plot(lmfit1)
train_data_scaled <- train_data_scaled[ , names(train_data_scaled) != 'percent_change_price_lag1']
test_data_scaled <- test_data_scaled[ , names(test_data_scaled) != 'percent_change_price_lag1']
unique(train_data_scaled$stock)
form1 <- percent_change_next_weeks_price ~ .
svr_tune_lists <- list() # initiate models list
best_Params_list <- list() # initiate list of best parameters for SVR for each stock
for (i in c(unique(train_data_scaled$stock))) {
set.seed(123)
svr_tune_lists[[i]] <-  tune.svm(form1, data = filter(train_data_scaled, stock == i)[, names(train_data_scaled) != 'stock'],
gamma = seq(.005,.1, by = .005), cost = seq(1, 10, by = 1), scale = T
)
best_Params_list[[i]] <- svr_tune_lists[[i]]$best.parameters
}
for (i in c(unique(train_data_scaled$stock))) {
print(is.na(best_Params_list[[i]]$gamma))
}
# this is the part to copy for the other models
svr_fit_list <- list()
for (i in c(unique(train_data_scaled$stock))) {
set.seed(123)
svr_fit_list[[i]] <-  svm(form1, data = filter(train_data_scaled, stock == i)[, names(train_data_scaled) != 'stock'],
gamma = best_Params_list[[i]]$gamma, cost = best_Params_list[[i]]$cost, scale = T
)
}
newpreds <- list()
for (i in c(unique(train_data_scaled$stock))) {
newpreds[[i]] <- test_data_scaled %>% filter(stock == i) %>% select(date, stock, percent_change_next_weeks_price) # first model needs this line, all others can skip
newpreds[[i]]$svr <- predict(svr_fit_list[[i]], filter(test_data_scaled, stock == i)[, names(test_data_scaled) != 'stock'])
}
predsdf <- bind_rows(newpreds, .id = "column_label")
predsdf %>% group_by(stock) %>%
summarize(
SVR = mean((na.omit(percent_change_next_weeks_price) - svr)^2)
)
predsdf %>%
summarize(
SVR = mean((na.omit(percent_change_next_weeks_price) - svr)^2)
)
pacman::p_load(MASS, tidyverse, here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tree, e1071)
select <- dplyr::select
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
str(raw_index_data)
skim(raw_index_data)
anyNA(raw_index_data)
missing_values <- colSums(is.na(raw_index_data))
missing_values
train_data <- subset(raw_index_data, quarter == 1)  # Training data (Q1: Jan-Mar)
test_data <- subset(raw_index_data, quarter == 2)   # Testing data (Q2: Apr-Jun)
cor_matrix <- cor(train_data[, sapply(train_data, is.numeric)], use = "complete.obs")
cor_matrix
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data[,selected_vars]
test_data_filtered <- test_data[,selected_vars]
train_data_filtered <- train_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))  # Clean and convert
test_data_filtered <- test_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))
# KNN imputation on the training data
train_data_imputed <- kNN(train_data_filtered, variable = c("percent_change_volume_over_last_wk", "previous_weeks_volume"),
k = 5, imp_var = F)  # Adjust k (number of neighbors) as necessary
# Should return 'FALSE' if no missing values
anyNA(train_data_imputed)
normalize_min_max <- function(x) {
(x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
train_data_scaled <- train_data_imputed %>%
mutate(across(where(is.numeric), normalize_min_max))
test_data_scaled <- test_data_filtered %>%
mutate(across(where(is.numeric), normalize_min_max))
train_data_scaled <- train_data_scaled %>%
mutate(date = parse_date_time(date, '%m/%d/%Y'))
test_data_scaled <- test_data_scaled %>%
mutate(date = parse_date_time(date, '%m/%d/%Y'))
train_data_scaled %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price)
) %>% head()
train_data_scaled <- train_data_scaled %>%
group_by(stock) %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price, n = 1)
) %>% ungroup()
test_data_scaled <- test_data_scaled %>%
group_by(stock) %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price, n = 1)
) %>% ungroup()
ggplot(train_data_scaled, aes(x = percent_change_price_lag1, y = percent_change_price)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Lagged Variable Plot: Percentage Change in Price (t) vs (t-1)",
x = "Percentage Change in Price (t-1)",
y = "Percentage Change in Price (t)"
) +
theme_minimal()
tree_model <- rpart(percent_change_next_weeks_price ~ ., data = train_data_scaled, method = "anova")
print(tree_model)
printcp(tree_model)
plot(tree_model, uniform = TRUE, main = "Regression Tree for Stock Price Prediction")
text(tree_model, use.n = TRUE, all = TRUE, cex = 0.7)
set.seed(123)
lagtree <- tree(percent_change_next_weeks_price ~ ., data = train_data_scaled)
# If needed, pruning can be performed by specifying the "best" argument
cv.lag <- cv.tree(lagtree)
best_size <- cv.lag$size[which.min(cv.lag$dev)]
prune.lag <- prune.tree(lagtree, best = best_size)
summary(prune.lag)
print(best_size)
# Get predictions on the test data
dtpreds <- predict(lagtree, newdata = test_data_scaled)
testpreds <- data.frame(date = test_data_scaled$date,
stock = test_data_scaled$stock,
response = test_data_scaled$percent_change_next_weeks_price,
dt = dtpreds)
mse_dt = mean((testpreds$response - testpreds$dt)^2)
mae_dt = mean(abs(testpreds$response - testpreds$dt))
me_dt = mean(testpreds$response - testpreds$dt)
mape_dt = mean(abs(testpreds$response - testpreds$dt)*100/testpreds$response)
testperfs <- data.frame(dt = c(mse_dt, mae_dt, me_dt, mape_dt)
) %>% t()
colnames(testperfs) <- c('mse', 'mae', 'me', 'mape')
print('')
print(testperfs)
lmfit1 <- step(lm(percent_change_next_weeks_price ~ . - percent_change_price_lag1, data = na.omit(train_data_scaled)), method = 'both')
summary(lmfit1)
lmpreds <- predict(lmfit1, test_data_scaled)
testpreds$lm <- lmpreds
mse_lm = mean((testpreds$response - testpreds$lm)^2)
mae_lm = mean(abs(testpreds$response - testpreds$lm))
me_lm = mean(testpreds$response - testpreds$lm)
mape_lm = mean(abs(testpreds$response - testpreds$lm)*100/testpreds$response)
testperfs <- rbind(testperfs, lm = c(mse_lm, mae_lm, me_lm, mape_lm))
print(testperfs)
plot(lmfit1)
train_data_scaled <- train_data_scaled[ , names(train_data_scaled) != 'percent_change_price_lag1']
test_data_scaled <- test_data_scaled[ , names(test_data_scaled) != 'percent_change_price_lag1']
unique(train_data_scaled$stock)
form1 <- percent_change_next_weeks_price ~ .
<<<<<<< Updated upstream
svr_tune_lists <- list() # initiate models list
best_Params_list <- list() # initiate list of best parameters for SVR for each stock
for (i in c(unique(train_data_scaled$stock))) {
set.seed(123)
svr_tune_lists[[i]] <-  tune.svm(form1, data = filter(train_data_scaled, stock == i)[, names(train_data_scaled) != 'stock'],
gamma = seq(.005,.1, by = .005), cost = seq(1, 10, by = 1), scale = T
)
best_Params_list[[i]] <- svr_tune_lists[[i]]$best.parameters
}
for (i in c(unique(train_data_scaled$stock))) {
print(is.na(best_Params_list[[i]]$gamma))
}
# this is the part to copy for the other models
svr_fit_list <- list()
for (i in c(unique(train_data_scaled$stock))) {
set.seed(123)
svr_fit_list[[i]] <-  svm(form1, data = filter(train_data_scaled, stock == i)[, names(train_data_scaled) != 'stock'],
gamma = best_Params_list[[i]]$gamma, cost = best_Params_list[[i]]$cost, scale = T
)
}
newpreds <- list()
for (i in c(unique(train_data_scaled$stock))) {
newpreds[[i]] <- test_data_scaled %>% filter(stock == i) %>% select(date, stock, percent_change_next_weeks_price) # first model needs this line, all others can skip
newpreds[[i]]$svr <- predict(svr_fit_list[[i]], filter(test_data_scaled, stock == i)[, names(test_data_scaled) != 'stock'])
}
predsdf <- bind_rows(newpreds, .id = "column_label")
predsdf %>% group_by(stock) %>%
summarize(
SVR = mean((na.omit(percent_change_next_weeks_price) - svr)^2)
)
predsdf %>%
summarize(
SVR = mean((na.omit(percent_change_next_weeks_price) - svr)^2)
)
# lists for LM model
lm_model_list <- list()
lm_preds_list <- list()
for (i in unique(train_data_scaled$stock)) {
set.seed(123)
lm_formula <- percent_change_next_weeks_price ~ . - percent_change_price_lag1 #this line is needed to define what to exclude since LM does not perform                                                                                        #like SVR for feature selection
lm_model_list[[i]] <- lm(lm_formula, data = filter(train_data_scaled, stock == i))
lm_fit_list <- list()
lm_formula <- percent_change_next_weeks_price ~ . - percent_change_price_lag1 #this line is needed to define what to exclude since LM does not perform like SVR                                                                               #when it comes to feature selection
for (i in unique(train_data_scaled$stock)) {
set.seed(123)
lm_fit_list[[i]] <- lm(lm_formula, data = filter(train_data_scaled, stock == i)[, names(train_data_scaled) != 'stock'])
}
# Defining the formula dynamically to use all existing variables except 'percent_change_next_weeks_price'
lm_formula <- as.formula(paste("percent_change_next_weeks_price ~ ."))
lm_fit_list <- list()
for (i in unique(train_data_scaled$stock)) {
set.seed(123)
stock_data <- filter(train_data_scaled, stock == i) %>% select(-stock)
lm_fit_list[[i]] <- lm(lm_formula, data = stock_data)
}
pacman::p_load(MASS, tidyverse, here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tree, e1071)
select <- dplyr::select
=======
svr_tune1 <- tune.svm(form1, data = train_data_scaled, gamma = seq(.01,.1, by = .01), cost = seq(.1, 1, by = .1), scale = T)
View(test_data_scaled)
View(train_data_scaled)
=======
text(tree_model, use.n = TRUE, all = TRUE, cex = 0.8)
pacman::p_load(here, skimr, rpart, dplyr, VIM, corrplot, car, quantmod, ggplot2, tidyverse, tree, e1071, MASS)
>>>>>>> Stashed changes
raw_index_data <- read.csv(here('Case Study 3', 'dow_jones_index.data'))
raw_index_names <- read.csv(here('Case Study 3', 'dow_jones_index.names'))
str(raw_index_data)
skim(raw_index_data)
anyNA(raw_index_data)
missing_values <- colSums(is.na(raw_index_data))
missing_values
train_data <- subset(raw_index_data, quarter == 1)  # Training data (Q1: Jan-Mar)
test_data <- subset(raw_index_data, quarter == 2)   # Testing data (Q2: Apr-Jun)
cor_matrix <- cor(train_data[, sapply(train_data, is.numeric)], use = "complete.obs")
cor_matrix
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
<<<<<<< Updated upstream
train_data_filtered <- train_data[,selected_vars]
test_data_filtered <- test_data[,selected_vars]
train_data_filtered <- train_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))  # Clean and convert
test_data_filtered <- test_data_filtered %>%
mutate(across(c(open, high, low, close), ~ as.numeric(gsub("[$,]", "", .))))
# KNN imputation on the training data
train_data_imputed <- kNN(train_data_filtered, variable = c("percent_change_volume_over_last_wk", "previous_weeks_volume"),
k = 5, imp_var = F)  # Adjust k (number of neighbors) as necessary
# Should return 'FALSE' if no missing values
anyNA(train_data_imputed)
normalize_min_max <- function(x) {
(x - min(x, na.rm = TRUE)) / (max(x, na.rm = TRUE) - min(x, na.rm = TRUE))
}
train_data_scaled <- train_data_imputed %>%
mutate(across(where(is.numeric), normalize_min_max))
test_data_scaled <- test_data_filtered %>%
mutate(across(where(is.numeric), normalize_min_max))
train_data_scaled <- train_data_scaled %>%
mutate(date = parse_date_time(date, '%m/%d/%Y'))
test_data_scaled <- test_data_scaled %>%
mutate(date = parse_date_time(date, '%m/%d/%Y'))
train_data_scaled %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price)
) %>% head()
train_data_scaled <- train_data_scaled %>%
group_by(stock) %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price, n = 1)
) %>% ungroup()
test_data_scaled <- test_data_scaled %>%
group_by(stock) %>%
arrange(date) %>%
mutate(
percent_change_price_lag1 = lag(percent_change_price, n = 1)
) %>% ungroup()
ggplot(train_data_scaled, aes(x = percent_change_price_lag1, y = percent_change_price)) +
geom_point(alpha = 0.6) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(
title = "Lagged Variable Plot: Percentage Change in Price (t) vs (t-1)",
x = "Percentage Change in Price (t-1)",
y = "Percentage Change in Price (t)"
) +
theme_minimal()
tree_model <- rpart(percent_change_next_weeks_price ~ ., data = train_data_scaled, method = "anova")
print(tree_model)
printcp(tree_model)
plot(tree_model, uniform = TRUE, main = "Regression Tree for Stock Price Prediction")
text(tree_model, use.n = TRUE, all = TRUE, cex = 0.7)
set.seed(123)
lagtree <- tree(percent_change_next_weeks_price ~ ., data = train_data_scaled)
# If needed, pruning can be performed by specifying the "best" argument
cv.lag <- cv.tree(lagtree)
best_size <- cv.lag$size[which.min(cv.lag$dev)]
prune.lag <- prune.tree(lagtree, best = best_size)
summary(prune.lag)
print(best_size)
# Get predictions on the test data
dtpreds <- predict(lagtree, newdata = test_data_scaled)
testpreds <- data.frame(date = test_data_scaled$date,
stock = test_data_scaled$stock,
response = test_data_scaled$percent_change_next_weeks_price,
dt = dtpreds)
mse_dt = mean((testpreds$response - testpreds$dt)^2)
mae_dt = mean(abs(testpreds$response - testpreds$dt))
me_dt = mean(testpreds$response - testpreds$dt)
mape_dt = mean(abs(testpreds$response - testpreds$dt)*100/testpreds$response)
testperfs <- data.frame(dt = c(mse_dt, mae_dt, me_dt, mape_dt)
) %>% t()
colnames(testperfs) <- c('mse', 'mae', 'me', 'mape')
print('')
print(testperfs)
lmfit1 <- step(lm(percent_change_next_weeks_price ~ . - percent_change_price_lag1, data = na.omit(train_data_scaled)), method = 'both')
summary(lmfit1)
lmpreds <- predict(lmfit1, test_data_scaled)
testpreds$lm <- lmpreds
mse_lm = mean((testpreds$response - testpreds$lm)^2)
mae_lm = mean(abs(testpreds$response - testpreds$lm))
me_lm = mean(testpreds$response - testpreds$lm)
mape_lm = mean(abs(testpreds$response - testpreds$lm)*100/testpreds$response)
testperfs <- rbind(testperfs, lm = c(mse_lm, mae_lm, me_lm, mape_lm))
print(testperfs)
plot(lmfit1)
train_data_scaled <- train_data_scaled[ , names(train_data_scaled) != 'percent_change_price_lag1']
test_data_scaled <- test_data_scaled[ , names(test_data_scaled) != 'percent_change_price_lag1']
unique(train_data_scaled$stock)
form1 <- percent_change_next_weeks_price ~ .
svr_tune_lists <- list() # initiate models list
best_Params_list <- list() # initiate list of best parameters for SVR for each stock
for (i in c(unique(train_data_scaled$stock))) {
set.seed(123)
svr_tune_lists[[i]] <-  tune.svm(form1, data = filter(train_data_scaled, stock == i)[, names(train_data_scaled) != 'stock'],
gamma = seq(.005,.1, by = .005), cost = seq(1, 10, by = 1), scale = T
)
best_Params_list[[i]] <- svr_tune_lists[[i]]$best.parameters
}
for (i in c(unique(train_data_scaled$stock))) {
print(is.na(best_Params_list[[i]]$gamma))
}
# this is the part to copy for the other models
svr_fit_list <- list()
for (i in c(unique(train_data_scaled$stock))) {
set.seed(123)
svr_fit_list[[i]] <-  svm(form1, data = filter(train_data_scaled, stock == i)[, names(train_data_scaled) != 'stock'],
gamma = best_Params_list[[i]]$gamma, cost = best_Params_list[[i]]$cost, scale = T
)
}
newpreds <- list()
for (i in c(unique(train_data_scaled$stock))) {
newpreds[[i]] <- test_data_scaled %>% filter(stock == i) %>% select(date, stock, percent_change_next_weeks_price) # first model needs this line, all others can skip
newpreds[[i]]$svr <- predict(svr_fit_list[[i]], filter(test_data_scaled, stock == i)[, names(test_data_scaled) != 'stock'])
}
predsdf <- bind_rows(newpreds, .id = "column_label")
predsdf %>% group_by(stock) %>%
summarize(
SVR = mean((na.omit(percent_change_next_weeks_price) - svr)^2)
)
predsdf %>%
summarize(
SVR = mean((na.omit(percent_change_next_weeks_price) - svr)^2)
)
for (i in unique(test_data_scaled$stock)) {
newpreds[[i]]$lm_pred <- predict(lm_fit_list[[i]], newdata = filter(test_data_scaled, stock == i))
}
# Defining the formula dynamically to use all existing variables except 'percent_change_next_weeks_price'
lm_formula <- as.formula(paste("percent_change_next_weeks_price ~ ."))
lm_fit_list <- list()
for (i in unique(train_data_scaled$stock)) {
set.seed(123)
stock_data <- filter(train_data_scaled, stock == i) %>% select(-stock)
lm_fit_list[[i]] <- lm(lm_formula, data = stock_data)
}
for (i in unique(test_data_scaled$stock)) {
newpreds[[i]]$lm_pred <- predict(lm_fit_list[[i]], newdata = filter(test_data_scaled, stock == i))
}
combined_preds_df <- bind_rows(newpreds, .id = "stock")
performance_metrics <- combined_preds_df %>%
group_by(stock) %>%
summarize(
MSE_LM = mean((percent_change_next_weeks_price - lm_pred)^2, na.rm = TRUE),
MAE_LM = mean(abs(percent_change_next_weeks_price - lm_pred), na.rm = TRUE),
MAPE_LM = mean(abs(percent_change_next_weeks_price - lm_pred) * 100 / abs(percent_change_next_weeks_price), na.rm = TRUE),
MSE_SVR = mean((percent_change_next_weeks_price - svr)^2, na.rm = TRUE),
MAE_SVR = mean(abs(percent_change_next_weeks_price - svr), na.rm = TRUE),
MAPE_SVR = mean(abs(percent_change_next_weeks_price - svr) * 100 / abs(percent_change_next_weeks_price), na.rm = TRUE)
)
print(performance_metrics)
# Plotting Actual vs. Predicted for LM and SVR
ggplot(combined_preds_df, aes(x = percent_change_next_weeks_price)) +
geom_point(aes(y = lm_pred, color = "LM"), alpha = 0.5) +
geom_point(aes(y = svr, color = "SVR"), alpha = 0.5) +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
labs(
title = "Actual vs Predicted Values for LM and SVR",
x = "Actual Percent Change Next Week's Price",
y = "Predicted Percent Change Next Week's Price"
) +
facet_wrap(~ stock) +
scale_color_manual(name = "Model", values = c("LM" = "blue", "SVR" = "red")) +
theme_minimal()
=======
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
svrpreds <- predict(svrfit1, test_data_scaled)
svrfit1 <- svm(form1, data = train_data_scaled, gamma = bestParams$gamma, cost = bestParams$cost, scale = T)
train_data <- subset(raw_index_data, quarter == 1)  # Training data (Q1: Jan-Mar)
test_data <- subset(raw_index_data, quarter == 2)   # Testing data (Q2: Apr-Jun)
cor_matrix <- cor(train_data[, sapply(train_data, is.numeric)], use = "complete.obs")
cor_matrix
selected_vars <- c('date', 'stock', "percent_change_next_weeks_price", "percent_change_price",
"percent_change_volume_over_last_wk", "previous_weeks_volume",
"days_to_next_dividend", "percent_return_next_dividend",
"open", "high", "low", "close")
train_data_filtered <- train_data %>%
select(all_of(selected_vars))
>>>>>>> Stashed changes
>>>>>>> Stashed changes
